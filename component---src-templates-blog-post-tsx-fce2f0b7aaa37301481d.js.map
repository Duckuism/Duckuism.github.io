{"version":3,"file":"component---src-templates-blog-post-tsx-fce2f0b7aaa37301481d.js","mappings":"6NAOA,MA+FaA,EAAOC,IAE0B,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,IAD5CC,MAAQC,eAAgBC,IACeP,EACvC,OACEQ,EAAAA,cAACC,EAAAA,EAAG,CACFC,MAA+B,QAA1BT,EAAEM,SAAiB,QAAbL,EAAJK,EAAMI,mBAAW,IAAAT,OAAb,EAAJA,EAAmBQ,aAAK,IAAAT,EAAAA,EAAI,GACnCW,YAA6D,QAAlDT,GAAGI,SAAiB,QAAbH,EAAJG,EAAMI,mBAAW,IAAAP,OAAb,EAAJA,EAAmBQ,eAAeL,aAAI,EAAJA,EAAMM,gBAAO,IAAAV,EAAAA,EAAK,IAClE,EAIN,UA1GyBW,KAAM,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAC7B,MAAMnB,GAAOoB,EAAAA,EAAAA,gBAAc,eAwCrB,KAAEC,EAAMpB,eAAgBC,EAAI,SAAEoB,EAAQ,KAAEC,GAASvB,EAEjDwB,GAAYH,SAAkB,QAAdX,EAAJW,EAAMI,oBAAY,IAAAf,OAAd,EAAJA,EAAoBL,QAAK,QAE3C,OACEF,EAAAA,cAACuB,EAAAA,EAAM,CAACC,SAAUA,SAAUtB,MAAOmB,GACjCrB,EAAAA,cAAA,WACEyB,UAAU,YACVC,WAAS,EACTC,SAAS,6BAET3B,EAAAA,cAAA,cACEA,EAAAA,cAAA,MAAI4B,SAAS,YAAY7B,SAAiB,QAAbS,EAAJT,EAAMI,mBAAW,IAAAK,OAAb,EAAJA,EAAmBN,OAC5CF,EAAAA,cAAA,SAAID,SAAiB,QAAbU,EAAJV,EAAMI,mBAAW,IAAAM,OAAb,EAAJA,EAAmBoB,OAEzB7B,EAAAA,cAAA,WACE8B,wBAAyB,CAAEC,OAAkB,QAAZrB,EAAEX,aAAI,EAAJA,EAAMiC,YAAI,IAAAtB,EAAAA,EAAI,IACjDkB,SAAS,gBAEX5B,EAAAA,cAAA,WACAA,EAAAA,cAAA,cACEA,EAAAA,cAACiC,EAAAA,EAAG,QAGRjC,EAAAA,cAAA,OAAKyB,UAAU,iBACbzB,EAAAA,cAAA,MACEkC,MAAO,CACLC,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,IAGXvC,EAAAA,cAAA,UACGmB,GACCnB,EAAAA,cAACwC,EAAAA,KAAI,CAACC,GAA0B,QAAxB9B,EAAEQ,SAAgB,QAARP,EAARO,EAAUuB,cAAM,IAAA9B,OAAR,EAARA,EAAkB+B,YAAI,IAAAhC,EAAAA,EAAI,GAAIiC,IAAI,QAAO,KAC9CzB,SAAqB,QAAbN,EAARM,EAAUhB,mBAAW,IAAAU,OAAb,EAARA,EAAuBX,QAIhCF,EAAAA,cAAA,UACGoB,GACCpB,EAAAA,cAACwC,EAAAA,KAAI,CAACC,GAAsB,QAApB3B,EAAEM,SAAY,QAARL,EAAJK,EAAMsB,cAAM,IAAA3B,OAAR,EAAJA,EAAc4B,YAAI,IAAA7B,EAAAA,EAAI,GAAI8B,IAAI,QACrCxB,SAAiB,QAAbJ,EAAJI,EAAMjB,mBAAW,IAAAa,OAAb,EAAJA,EAAmBd,MAAM,SAM7B,C","sources":["webpack://gatsby-starter-blog/./src/templates/blog-post.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { HeadProps, Link, useStaticQuery, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogPostTemplate = () => {\n  const data = useStaticQuery<Queries.BlogPostBySlugQuery>(graphql`\n    query BlogPostBySlug(\n      $id: String\n      $previousPostId: String\n      $nextPostId: String\n    ) {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n      markdownRemark(id: { eq: $id }) {\n        id\n        excerpt(pruneLength: 160)\n        html\n        frontmatter {\n          title\n          date(formatString: \"MMMM DD, YYYY\")\n          description\n        }\n      }\n      previous: markdownRemark(id: { eq: $previousPostId }) {\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n        }\n      }\n      next: markdownRemark(id: { eq: $nextPostId }) {\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n        }\n      }\n    }\n  `)\n\n  const { site, markdownRemark: post, previous, next } = data\n\n  const siteTitle = site?.siteMetadata?.title || `Title`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post?.frontmatter?.title}</h1>\n          <p>{post?.frontmatter?.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post?.html ?? \"\" }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous?.fields?.slug ?? \"\"} rel=\"prev\">\n                ← {previous?.frontmatter?.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next?.fields?.slug ?? \"\"} rel=\"next\">\n                {next?.frontmatter?.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport const Head = ({\n  data: { markdownRemark: post },\n}: HeadProps<Queries.BlogPostBySlugQuery>) => {\n  return (\n    <Seo\n      title={post?.frontmatter?.title ?? \"\"}\n      description={(post?.frontmatter?.description || post?.excerpt) ?? \"\"}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n"],"names":["Head","_ref","_post$frontmatter$tit","_post$frontmatter3","_ref2","_post$frontmatter4","data","markdownRemark","post","React","Seo","title","frontmatter","description","excerpt","BlogPostTemplate","_site$siteMetadata","_post$frontmatter","_post$frontmatter2","_post$html","_previous$fields$slug","_previous$fields","_previous$frontmatter","_next$fields$slug","_next$fields","_next$frontmatter","useStaticQuery","site","previous","next","siteTitle","siteMetadata","Layout","location","className","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","Bio","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}