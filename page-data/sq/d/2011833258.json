{"data":{"site":{"siteMetadata":{"title":"Duckuism"}},"markdownRemark":{"id":"308376f3-1211-581d-abf3-e972d6476c73","excerpt":"script 태그의 async vs defer 일반적으로 브라우저가 렌더링 되는 동안, HTML 구문 분석 중에 스크립트 태그를 만나면 해당 스크립트를 모두 로딩할 때까지 블로킹이 된다. 블로킹이 되면 HTML…","html":"<h1>script 태그의 async vs defer</h1>\n<p>일반적으로 브라우저가 렌더링 되는 동안, HTML 구문 분석 중에 스크립트 태그를 만나면 해당 스크립트를 모두 로딩할 때까지 블로킹이 된다. 블로킹이 되면 HTML 구문 분석이 완료되는 속도가 느려지므로 유저가 첫 화면을 볼 때까지의 시간이 굉장히 길어지고, 사용자 경험에 악영향을 미친다. 이런 상황을 해결할 수 있는 방법 중에 script 태그의 async와 defer 속성이 있는데 이 두 가지 속성에 대해 알아보고 각각의 장단점, 두 속성의 차이에 대해 정리해본다.</p>\n<h1>script 태그의 async(비동기) 속성</h1>\n<p>비동기적으로 스크립트를 로딩하는 하나의 방법이다. 스크립트가 비동기라면 페이지의 다른 스크립트들과 상관없이 독립적으로 로딩되고, 페이지 로딩이 완료되는 것을 막지 않는다. 만약 다양한 외부 스크립트들이 있는 페이지라면 이 스크립트들을 비동기적으로 로딩하는 것은 브라우저가 병렬적으로 스크립트를 다운로드하고 실행하기 때문에 전체 페이지 로딩 시간을 줄여줄 것이다.</p>\n<h1>script 태그의 defer(지연) 속성</h1>\n<p>브라우저가 스크립트 분석을 HTML 파싱 이후, DOMContentLoaded 이벤트 이전에 실행해야 함을 나타내는 속성이다. 즉, 페이지 전체 HTML 파싱을 먼저 한 후 스크립트 로딩을 시작하므로, 빈 화면이 보일 일은 없다. 만약 다른 스크립트들에 의존성을 가진 스크립트를 로딩해야하거나 초기 페이지 로딩후에 스크립트를 로딩하는 시간을 개선하고 싶을 때 유용하다.</p>\n<h1>async와 defer 속성</h1>\n<p>HTML 문서를 파싱하는 동안 자바스크립트 파일들을 다운로드 하게 만든다는 점은 동일하지만 이 자바스크립트 파일들을 실행하는 시점에 차이가 있다.</p>\n<p>async 속성은 스크립트를 다운로드하고 사용이 가능하자마자 실행하는 반면, defer는 스크립트를 다운로드하고 HTML 문서가 파싱되는 것을 기다렸다가 실행한다.</p>\n<p>이 둘 모두 자바스크립트 파일을 다운로드하는 동안 HTML 문서 파싱을 하게 해주어 성능을 개선하므로 대부분의 상황에서 어떤 것을 사용하던 상관이 없다. <strong>하지만 몇몇의 상황에서는 하나의 속성이 다른 것보다 좋은 경우가 있다.</strong></p>\n<h1>defer 속성 사용 시 장점</h1>\n<p>defer 속성을 사용하는 것에는 아래와 같은 이점이 있다.</p>\n<ul>\n<li>페이지가 로딩되고 파싱된 후에 실행되는 것을 보장하므로 초기 페이지 로딩이 느릴 수가 없다.</li>\n<li>페이지가 로딩될 떄까지 파싱되지 않기 때문에 이미지와 같이 페이지에 다른 요소들을 파싱하는 것을 블러킹하지 않는다.</li>\n<li>페이지의 나머지 부분과 독립적으로 변경될 수 있다는 것은 만일 defer 속성이 적용되어있는 스크립트에 변경이 생겼을 경우 전체 페이지를 다시 파싱하거나 리렌더링 할 필요가 없다.</li>\n</ul>\n<h1>defer 속성 사용 시 단점</h1>\n<ul>\n<li>잠재적으로 스크립트 로딩 때문에 페이지 성능이 낮아질 가능성이 있다. 만약 defer 속성을 사용하는 많은 스크립트가 있다면 이 스크립트 들은 동시에 로딩될 것이므로 페이지 속도를 느리게 만들 수 있다.</li>\n<li>오래된 브라우저들은 defer 속성을 지원하지 않으므로 스크립트들은 몇몇 유저에게 전혀 로딩되지 않을 수 있다.</li>\n</ul>\n<h1>async 속성 사용 시 장점</h1>\n<ul>\n<li>큰 자바스크립트 파일을 로딩할 때 async 속성을 쓰는 것이 효과적이다. 브라우저가 자바스크립트 파일이 다운로드 되는동안 HTML 문서 파싱을 계속하게 만들기 때문이다. 브라우저는 가능한 빠르게 요소들을 렌더링하기 시작하기 때문에 페이지 전체의 로딩 시간을 감소시킨다.</li>\n</ul>\n<h1>async 속성 사용 시 단점</h1>\n<ul>\n<li>가장 큰 단점은 렌더링 차단 CSS 규칙을 위반할 수 있다는 점이다. 이 규칙은 자바스크립트 파일이 로딩되는 동안 페이지가 올바르게 로딩되고 빈 화면이 보이지 않도록 하는 것을 보장한다. 만약 async 속성을 사용한다면 CSS 파일은 자바스크립트 파일이 로딩되자마자 곧바로 CSS 파일을 다운로드 받기 시작할 것이고 만약 자바스크립트 파일이 크거나 로딩에 오랜 시간이 걸리면 CSS 파일 다운로드가 지연되므로 제대로 된 화면이 보이는데에 오랜 시간이 걸릴 수 있다.</li>\n<li>async의 또 다른 단점은 이미지와 같이 페이지의 다른 리소스를 로딩하는 걸 지연시킬 수도 있다는 것이다. 자바스크립트 파일이 로딩 되고 스타일시트 및 다른 asset을 다운로드하기 시작할 것이므로, 만약 자바스크립트 파일이 크다면 그 뒤에 로딩해야하는 다른 자원들을 로딩하는 시작 시간이 계속 미뤄지기 때문에 페이지 전체 로딩 시간을 느리게 만들 수 있다.</li>\n<li>async는 유저 스크립트의 특정 타입과 확장프로그램에 문제를 발생시킬 수 있다. 페이지가 로딩된 후 DOM을 조작하는 것을 기반으로 하는 유저 스크립트나 확장 프로그램이 있을 수 있는데, 만약 async가 사용된다면 이러한 유저 스크립트나 확장 프로그램이 실행될 때 DOM 파싱이 끝나지 않은 상태일 수 있으므로 정상적으로 동작하지 않을 수 있다.</li>\n</ul>\n<h1>한 줄 요약</h1>\n<p>async/defer는 모두 HTML파싱 시작과 동시에 스크립트를 로딩하지만 async는 스크립트 파일 로딩이 완료되자마자 실행하고, defer는 HTML 파싱이 완료될 때까지 기다렸다가 스크립트를 실행한다.</p>\n<p>대부분의 경우에는 async가 적절한 선택.</p>\n<h1>참조</h1>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/HTML/Element/script\">https://developer.mozilla.org/ko/docs/Web/HTML/Element/script</a>\n<a href=\"https://codedamn.com/news/javascript/async-and-defer-in-script-tag\">https://codedamn.com/news/javascript/async-and-defer-in-script-tag</a></p>","frontmatter":{"title":"Script 태그의 async와 defer","date":"August 03, 2023","description":"HTML 파싱을 블로킹하지 않기 위해 사용해야하는 async, defer 속성!"}},"previous":{"fields":{"slug":"/async-defer/"},"frontmatter":{"title":"Script 태그의 async와 defer"}},"next":{"fields":{"slug":"/async-defer/"},"frontmatter":{"title":"Script 태그의 async와 defer"}}}}